#!/usr/bin/env python2
# (ignore bad script name) pylint: disable=C0103
"""
A script for downloading VO data.
"""
from __future__ import print_function

import errno
import glob
import os
import pipes
import shutil
import subprocess
import sys
import tempfile
import traceback

from email.mime.text import MIMEText
from optparse import OptionParser


verbose = False

class Error(Exception):
    "Class for expected exceptions"
    pass


def get_options(argv):
    "Parse, validate, and transform command-line options."
    parser = OptionParser("%prog [options] <destination>\n")

    parser.add_option("--repo", metavar="REPO", default='osg',
                      help="The specific yum repo to download the VO data from. Defaults to '%default'")

    options, args = parser.parse_args(argv[1:]) # raises SystemExit(2) on error
    if len(args) < 1:
        parser.error("Destination not specified")

    destdir = args[0]

    return options, destdir


def type_of_exception(exception_object):
    "Return the class name of an exception as a string"
    if isinstance(exception_object, Exception):
        return str(exception_object.__class__.__name__)


def _download_vodata(repo=None):
    """Download and extract the vo-client RPM. Current directory should be an
    empty temporary directory.
    """
    args = ['yumdownloader', 'vo-client']
    if repo:
        args.append('--disablerepo=*')
        args.append('--enablerepo=' + repo)
    try:
        subprocess.check_call(args)
    except OSError as err:
        if err.errno == errno.ENOENT:
            raise Error("yumdownloader not found -- install yum-utils")
        else:
            raise
    except subprocess.CalledProcessError as err:
        raise Error("Error downloading vo-client: " + str(err))

    try:
        vodata_rpm = glob.glob('vo-client-*.rpm')[0]
    except IndexError as err:
        raise Error("Downloaded RPM not found")

    subprocess.check_call("rpm2cpio %s | cpio -id --quiet" % pipes.quote(vodata_rpm), shell=True)


def _move_vodata(destdir):
    """Move VO data to destdir. Current directory must be the directory that
    vomses and vomsdir are in, and destdir must be an absolute path.
    """
    # The vo-client RPM has this structure:
    #
    # etc/vomses
    # etc/grid-security/vomsdir/*/*.lsc
    #
    # Move it so that "etc" is replaced by destdir.
    # Try not to leave vomsdir in an inconsistent state if an error happens.

    if not os.path.exists(destdir):
        os.makedirs(destdir)
    elif not os.path.isdir(destdir):
        raise Error(destdir + " exists but is not a directory")

    shutil.move('etc/vomses', os.path.join(destdir, 'vomses'))

    gridsecdir = os.path.join(destdir, 'grid-security')
    if not os.path.exists(gridsecdir):
        os.makedirs(gridsecdir)
    elif not os.path.isdir(gridsecdir):
        raise Error(gridsecdir + " exists but is not a directory")

    vomsdir = os.path.join(gridsecdir, 'vomsdir')
    newdir = os.path.join(gridsecdir, '.vomsdir.new')
    olddir = os.path.join(gridsecdir, '.vomsdir.old')

    if os.path.exists(newdir):
        shutil.rmtree(newdir)

    shutil.move('etc/grid-security/vomsdir', newdir)

    if os.path.exists(olddir):
        shutil.rmtree(olddir)

    if os.path.exists(vomsdir):
        os.rename(vomsdir, olddir)
    os.rename(newdir, vomsdir)

    shutil.rmtree(olddir, ignore_errors=True)


def update_vodata(destdir, repo=None):
    "Fetch the VO data, and move it to its proper place"
    destdir = os.path.abspath(destdir)
    oldcwd = os.getcwd()
    tempdir = tempfile.mkdtemp(prefix='vodata')
    try:
        os.chdir(tempdir)
        _download_vodata(repo)
        _move_vodata(destdir)
        print("VO data downloaded to " + destdir)
    finally:
        os.chdir(oldcwd)
        shutil.rmtree(tempdir)


def main():
    options, destdir = get_options(sys.argv)
    try:
        update_vodata(destdir, options.repo)
    except Error as err:
        print(str(err), file=sys.stderr)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())

